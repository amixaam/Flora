// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PlaybackControls renders correctly 1`] = `
<View
  style={
    {
      "flexDirection": "column",
      "gap": 8,
      "justifyContent": "center",
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "marginVertical": -16,
      }
    }
  >
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": undefined,
          "borderColor": "rgba(121, 116, 126, 1)",
          "borderRadius": 23,
          "borderWidth": 0,
          "elevation": 0,
          "height": 46,
          "margin": 6,
          "marginHorizontal": -12,
          "overflow": "hidden",
          "padding": undefined,
          "transform": undefined,
          "width": 46,
        }
      }
      testID="repeat-off-button-container"
    >
      <View
        accessibilityComponentType="button"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityTraits="button"
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        centered={true}
        collapsable={false}
        focusable={true}
        hitSlop={
          {
            "bottom": 6,
            "left": 6,
            "right": 6,
            "top": 6,
          }
        }
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            [
              {
                "alignItems": "center",
                "flexGrow": 1,
                "justifyContent": "center",
              },
              {
                "borderRadius": 23,
              },
            ],
          ]
        }
        testID="repeat-off-button"
      >
        <Text />
      </View>
    </View>
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": undefined,
          "borderColor": "rgba(121, 116, 126, 1)",
          "borderRadius": 26,
          "borderWidth": 0,
          "elevation": 0,
          "height": 52,
          "margin": 6,
          "marginHorizontal": -12,
          "overflow": "hidden",
          "padding": undefined,
          "transform": undefined,
          "width": 52,
        }
      }
      testID="previous-button-container"
    >
      <View
        accessibilityComponentType="button"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityTraits="button"
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        centered={true}
        collapsable={false}
        focusable={true}
        hitSlop={
          {
            "bottom": 6,
            "left": 6,
            "right": 6,
            "top": 6,
          }
        }
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            [
              {
                "alignItems": "center",
                "flexGrow": 1,
                "justifyContent": "center",
              },
              {
                "borderRadius": 26,
              },
            ],
          ]
        }
        testID="previous-button"
      >
        <Text />
      </View>
    </View>
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": undefined,
          "borderColor": "rgba(121, 116, 126, 1)",
          "borderRadius": 40,
          "borderWidth": 0,
          "elevation": 0,
          "height": 80,
          "margin": 6,
          "marginHorizontal": -12,
          "overflow": "hidden",
          "padding": undefined,
          "transform": undefined,
          "width": 80,
        }
      }
      testID="pause-button-container"
    >
      <View
        accessibilityComponentType="button"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityTraits="button"
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        centered={true}
        collapsable={false}
        focusable={true}
        hitSlop={
          {
            "bottom": 6,
            "left": 6,
            "right": 6,
            "top": 6,
          }
        }
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            [
              {
                "alignItems": "center",
                "flexGrow": 1,
                "justifyContent": "center",
              },
              {
                "borderRadius": 40,
              },
            ],
          ]
        }
        testID="pause-button"
      >
        <Text />
      </View>
    </View>
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": undefined,
          "borderColor": "rgba(121, 116, 126, 1)",
          "borderRadius": 26,
          "borderWidth": 0,
          "elevation": 0,
          "height": 52,
          "margin": 6,
          "marginHorizontal": -12,
          "overflow": "hidden",
          "padding": undefined,
          "transform": undefined,
          "width": 52,
        }
      }
      testID="next-button-container"
    >
      <View
        accessibilityComponentType="button"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityTraits="button"
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        centered={true}
        collapsable={false}
        focusable={true}
        hitSlop={
          {
            "bottom": 6,
            "left": 6,
            "right": 6,
            "top": 6,
          }
        }
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            [
              {
                "alignItems": "center",
                "flexGrow": 1,
                "justifyContent": "center",
              },
              {
                "borderRadius": 26,
              },
            ],
          ]
        }
        testID="next-button"
      >
        <Text />
      </View>
    </View>
    <View
      collapsable={false}
      style={
        {
          "backgroundColor": undefined,
          "borderColor": "rgba(121, 116, 126, 1)",
          "borderRadius": 23,
          "borderWidth": 0,
          "elevation": 0,
          "height": 46,
          "margin": 6,
          "marginHorizontal": -12,
          "overflow": "hidden",
          "padding": undefined,
          "transform": undefined,
          "width": 46,
        }
      }
      testID="playback-controls-shuffle-button-container"
    >
      <View
        accessibilityComponentType="button"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": false,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityTraits="button"
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        centered={true}
        collapsable={false}
        focusable={true}
        hitSlop={
          {
            "bottom": 6,
            "left": 6,
            "right": 6,
            "top": 6,
          }
        }
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "overflow": "hidden",
            },
            [
              {
                "alignItems": "center",
                "flexGrow": 1,
                "justifyContent": "center",
              },
              {
                "borderRadius": 23,
              },
            ],
          ]
        }
        testID="playback-controls-shuffle-button"
      >
        <Text />
      </View>
    </View>
  </View>
  <View
    style={
      {
        "gap": 8,
      }
    }
  >
    <View
      onLayout={[Function]}
      style={
        [
          {
            "defaultIndicatorIdle": {
              "backgroundColor": "#C0C0C0",
              "height": 10,
              "width": 2,
            },
            "defaultIndicatorMarked": {
              "backgroundColor": "#CCCCCC",
              "height": 20,
              "width": 5,
            },
            "defaultSlider": {},
            "defaultSlideriOS": {
              "height": 40,
            },
            "sliderMainContainer": {
              "width": "100%",
              "zIndex": 1,
            },
            "stepIndicatorElement": {
              "alignContent": "center",
              "alignItems": "center",
            },
            "stepNumber": {
              "alignItems": "center",
              "marginTop": 20,
              "position": "absolute",
            },
            "stepsIndicator": {
              "flex": 1,
              "flexDirection": "row",
              "justifyContent": "space-between",
              "top": 0,
              "zIndex": 2,
            },
            "thumbImage": {
              "alignContent": "center",
              "alignItems": "center",
              "position": "absolute",
            },
            "thumbImageContainer": {
              "alignContent": "center",
              "alignItems": "center",
              "justifyContent": "center",
              "position": "absolute",
              "zIndex": 3,
            },
            "trackMarkContainer": {
              "alignContent": "center",
              "alignItems": "center",
              "alignSelf": "center",
              "justifyContent": "center",
              "position": "absolute",
              "zIndex": 3,
            },
          },
          [
            {
              "marginHorizontal": -16,
            },
            {},
          ],
          {
            "justifyContent": "center",
          },
        ]
      }
    >
      <RNCSlider
        disabled={false}
        inverted={false}
        lowerLimit={-9007199254740991}
        maximumTrackTintColor="#E8DEF8"
        maximumValue={1}
        minimumTrackTintColor="#E8DEF8"
        minimumValue={0}
        onChange={[Function]}
        onRNCSliderAccessibilityAction={null}
        onRNCSliderSlidingComplete={[Function]}
        onRNCSliderSlidingStart={null}
        onRNCSliderValueChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        step={0}
        style={
          [
            {
              "width": 0,
              "zIndex": 1,
            },
            {},
            {
              "alignContent": "center",
              "alignItems": "center",
            },
          ]
        }
        tapToSeek={false}
        testID="slider"
        thumbTintColor="#E8DEF8"
        upperLimit={9007199254740991}
        value={0.3611111111111111}
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "justifyContent": "space-between",
        }
      }
    >
      <Text
        style={
          [
            {
              "color": "#E8DEF8",
              "fontFamily": "Poppins-Medium",
              "fontSize": 10,
              "letterSpacing": 0.5,
              "lineHeight": 12,
            },
          ]
        }
      >
        01:05
      </Text>
      <Text
        style={
          [
            {
              "color": "#E8DEF8",
              "fontFamily": "Poppins-Medium",
              "fontSize": 10,
              "letterSpacing": 0.5,
              "lineHeight": 12,
            },
          ]
        }
      >
        -
        01:55
      </Text>
    </View>
  </View>
</View>
`;
