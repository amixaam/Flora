import React from "react";
import { render, fireEvent, waitFor, act } from "@testing-library/react-native";
import { NavigationContainer } from "@react-navigation/native";
import { useSongsStore } from "../../src/store/songs";
import HomeTab from "../../src/app/(tabs)/(home)";
import { Album, Playlist } from "../../src/types/song";

// Mock the external dependencies
jest.mock("../../src/store/songs", () => ({
    useSongsStore: jest.fn(),
}));

jest.mock("../../src/hooks/useBottomSheetModal", () => ({
    __esModule: true,
    default: () => ({
        sheetRef: { current: null },
        open: jest.fn(),
        close: jest.fn(),
    }),
}));

jest.mock("react-native-safe-area-context", () => ({
    useSafeAreaInsets: () => ({ top: 0, right: 0, bottom: 0, left: 0 }),
}));

describe("HomeTab", () => {
    beforeEach(() => {
        // @ts-ignore
        (useSongsStore as jest.Mock).mockReturnValue({
            getRecentlyPlayed: jest.fn().mockReturnValue([
                {
                    id: "1",
                    title: "Playlist 1",
                    songs: ["123"],
                },
                {
                    id: "2",
                    title: "Playlist 2",
                    songs: ["123", "234"],
                },
                {
                    id: "3",
                    title: "Playlist 3",
                    songs: ["123", "234", "201"],
                },
            ] as Playlist[]),
            setSelectedContainer: jest.fn(),
        });
    });

    it("renders correctly", () => {
        const { toJSON } = render(
            <NavigationContainer>
                <HomeTab />
            </NavigationContainer>
        );
        expect(toJSON()).toMatchSnapshot();
    });

    it('displays the "Recently played" section', () => {
        const { getByText } = render(
            <NavigationContainer>
                <HomeTab />
            </NavigationContainer>
        );
        expect(getByText("Recently played")).toBeTruthy();
    });

    // it("renders the correct items in the recently played list", async () => {
    //     const { getByText, debug } = render(
    //         <NavigationContainer>
    //             <HomeTab />
    //         </NavigationContainer>
    //     );

    //     const songCounts = getByText("Playlist 1");
    //     expect(songCounts).toBeTruthy();
    //     debug();
    // });
});
